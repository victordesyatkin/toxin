mixin input(props = {})
  -
    let {
      label, stateText, type, name, placeholder, button = {}, value, required, pattern, tabindex,
      isStraight, isExpanded, notFocused, isFocused, isAutoFocused, forDrop, theme, isDisabled
    } = props;
    let { isVisible: isVisibleButton } = button;
    let themes = {
      dropdown: 'dropdown',
      dropdownFill: 'dropdown_fill',
    }
    let 
      className = 'input';
      classNames = `${className} js-${className}`;
      classesInputSection = `${className}__section js-${className}__section`;
      inputClasses = `${className}__input js-${className}__input`;
    classesInputSection += isAutoFocused || isFocused ? ` ${className}__section_focused` : '';
    classesInputSection += isVisibleButton ? ` ${className}__section_offset` : '';
    classNames += themes[theme] ? ` ${className}_theme_${themes[theme]}` : '';
    classNames += isStraight ? ` ${className}_straight` : '';
    classNames += isExpanded ? ` ${className}_expanded` : '';
    classNames += notFocused ? ` ${className}_not-focused` : '';
  div(class=classNames)
    if (label || stateText)
      div(class=`${className}__info`)
        if (label)
          div(class=`${className}__label`)
            label(class=`${className}__label-text`, for=name)= label
        if stateText
          span.input__state-text= stateText
    div(class=classesInputSection)
      input(
        id=name,
        type=type,
        name=name,
        placeholder=placeholder,
        pattern=pattern,
        tabindex=tabindex,
        required=required,
        autofocus=isAutoFocus,
        value=value,
        class=inputClasses,
        disabled=isDisabled
      )
      if (isVisibleButton)
        -
          let { type: buttonType, iconClass: buttonIconClassName, name: buttonName, value: buttonValue } = button;
          let buttonClassName = `${className}__button`;
          let buttonClassNames = `${buttonClassName} js-${buttonClassName}`;

          switch (buttonIconClassName) {
            case 'arrow-down': {
              buttonClassNames += ` ${buttonClassName}_default`;
              buttonClassNames += ' icon-expand_more';
              break;
            }
            case 'arrow-forward': {
              buttonClassNames += ` ${buttonClassName}_forwarded`;
              buttonClassNames += ' icon-arrow_forward';
              break;
            }
            default: {
              buttonClassNames += buttonIconClassName ? ` ${buttonIconClassName}` : '';
            }
          }
        button(type=buttonType, name=buttonName, class=buttonClassNames)
