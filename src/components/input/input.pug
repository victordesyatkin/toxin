mixin input(o = {})
  -
    let { label = '', stateText = '', type = '', name = '', state = false, placeholder = '', button = {}, value, required, pattern, tabindex } = o || {};
    let { visible:buttonVisible = false } = button || {};
    let 
      autofocus = state ? true : false;
      classesInputSection = 'input__section js-input__section' + (buttonVisible ? ' input__section_offset' : '') + (autofocus ? ' input__section_hovered' : '');
      inputClasses = 'input__input js-input__input';
  .input
    .input__info
      if label
        .input__label
          label.input__label-text(for=name)=label
      if stateText
        .input__state-text=stateText
    div(class=classesInputSection)
        input(
          id = name
          type = type
          name = name
          placeholder = placeholder
          pattern = pattern
          tabindex = tabindex
          required = required
          autofocus = autofocus
          value = value
          class = inputClasses
        )
        if buttonVisible
          - 
            let { type:buttonType = 'button', class:buttonClass = 'default', name:buttonName, value:buttonValue } = button || {};
            let buttonClasses = 'input__button js-input__button';
            switch (buttonClass) {
              case 'arrow-down': {
                buttonClasses += ' input__button_default';
                buttonClasses += ' icon-expand_more';
                break;
              }
              case 'arrow-forward':
              default: {
                buttonClasses += ' input__button_forwarded';
                buttonClasses += ' icon-arrow_forward';
                break;
              }
            }
          button(
            type=buttonType
            name=buttonName
            class=buttonClasses
          )