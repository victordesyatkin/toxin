mixin input(props = {})
  -
    let {
      label, stateText, type, name, isAutoFocus, placeholder, button = {}, value, required, pattern, tabindex, isFocus, forDrop, theme,
      isStraight, isExpand, notFocus
    } = props;
    let { isVisible: isVisibleButton } = button;
    let themes = {
      dropdown: 'dropdown',
    }
    let 
      className = 'input';
      classNames = `${className} js-${className}`;
      classesInputSection = `${className}__section js-${className}__section`;
      inputClasses = `${className}__input js-${className}__input`;
    classesInputSection += isAutoFocus || isFocus ? ` ${className}__section_focused` : '';
    classesInputSection += isVisibleButton ? ` ${className}__section_offset` : '';
    classNames += themes[theme] ? ` ${className}_theme_${themes[theme]}` : '';
    classNames += isStraight ? ` ${className}_straight` : '';
    classNames += isExpand ? ` ${className}_expanded` : '';
    classNames += notFocus ? ` ${className}_not-focused` : '';
  div(
    class=classNames
  )
    div(
      class=`${className}__info`
    )
      if (label)
        div(
          class=`${className}__label`
        )
          label(
            class=`${className}__label-text`
            for=name
          )=label
      if stateText
        .input__state-text=stateText
    div(class=classesInputSection)
        input(
          id=name
          type=type
          name=name
          placeholder=placeholder
          pattern=pattern
          tabindex=tabindex
          required=required
          autofocus=isAutoFocus
          value=value
          class=inputClasses
        )
        if (isVisibleButton)
          - 
            let { type: buttonType, iconClass: buttonIconClass, name: buttonName, value: buttonValue } = button;
            let buttonClass = `${className}__button`;
            let buttonClasses = `${buttonClass} js-${buttonClass}`;

            switch (buttonIconClass) {
              case 'arrow-down': {
                buttonClasses += ` ${buttonClass}_default`;
                buttonClasses += ' icon-expand_more';
                break;
              }
              case 'arrow-forward': {
                buttonClasses += ` ${buttonClass}_forwarded`;
                buttonClasses += ' icon-arrow_forward';
                break;
              }
              default: {
                buttonClasses += buttonIconClass ? ` ${buttonIconClass}` : '';
              }
            }
          button(
            type=buttonType
            name=buttonName
            class=buttonClasses
            data-class=buttonClasses
          )