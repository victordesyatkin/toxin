include ../input/input

mixin dropdown(props = {})
  -
    let { dropdown = {}, input } = props;
    let {
        isExpanded, isForcedExpanded, isControlVisible, isStraight,
        buttonDecreaseText, buttonIncreaseText, buttonCleanText, buttonApplyText, type,
    } = dropdown;
    let className = 'dropdown';
    let classNames = `${className} js-${className}`;
    classNames += isExpanded ? ` ${className}_expanded` : '';
    classNames += isForcedExpanded ? ` ${className}_forced-expanded` : ''; 
    classNames += isStraight ? ` ${className}_straight` : '';
  div(class=classNames, data-type=`${type}`)
    div(class=`${className}__input js-${className}__input`)
      +input({...input, theme: 'dropdown', isStraight: isStraight || type === 0, isExpanded: isForcedExpanded || isExpanded})
    .dropdown__main.js-dropdown__main
      -
        let { items = [] } = props;
      each item in items
        -
          let { title, value, name } = item || {};
          let buttonMinusClass = 'dropdown__button js-dropdown__button'
          buttonMinusClass += value === 0 ? ' dropdown__button_fade js-dropdown__button_fade' : '';
        .dropdown__item.js-dropdown__item
          input(name=name, type="hidden", value=value, data-title=title)
          .dropdown__item-title= title
          .dropdown__item-control
            button(type="button", data-type="0", class=buttonMinusClass)= buttonDecreaseText
            .dropdown__item-value.js-dropdown__item-value= value
            button.dropdown__button(type="button", data-type="1")= buttonIncreaseText
      if (isControlVisible)
        .dropdown__main-control
          button.dropdown__control-button.dropdown__control-button_clean(
            type="button",
            name="clean"
          )= buttonCleanText
          button.dropdown__control-button.dropdown__control-button_apply(
            type="button",
            name="apply"
          )= buttonApplyText
