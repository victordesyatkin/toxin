include ../title-label/title-label

mixin text-field(props)
  if props
    -
      let
        {
          title, type = 'text', name, placeholder, button, value, isRequired,
          pattern, tabindex, isDisabled, ariaLabel, isReadonly, isAutoFocused, theme, isOpened
        } = props || {};
        themes = {
          comfort: 'comfort',
        };
        className = 'text-field';
        classNames = `${className} js-${className}`;
        classNames += button ? ` ${className}_withButton` : ''; 
        classNames += themes[theme] ? ` ${className}_theme_${themes[theme]}` : '';
        classNames += isOpened ? ` ${className}_opened` : '';
        id = `${name}-${Math.random().toString(16).substr(2)}`;
    div(class=classNames)
      if title
        div(class=`${className}__label`)
          +title-label({ ...title, htmlFor: id })
      input(
        type=type,
        name=name,
        placeholder=placeholder,
        value=value,
        autofocus=isAutoFocused,
        required=isRequired,
        pattern=pattern,
        tabindex=tabindex,
        aria-label=ariaLabel,
        disabled=isDisabled,
        readonly=isReadonly,
        class=`${className}__input js-${className}__input`,
        id=id
      )
      if button
        -
          let { type: buttonType = "button", iconClass: buttonIconClassName, name: buttonName, value: buttonValue } = button;
          let buttonClassName = `${className}__button`;
          let buttonClassNames = `${buttonClassName} js-${buttonClassName}`;

          switch (buttonIconClassName) {
            case 'arrow-forward': {
              buttonClassNames += ` ${buttonClassName}_forwarded`;
              buttonClassNames += ' icon-arrow_forward';
              break;
            }
            case 'arrow-down':
            default: {
              buttonClassNames += ` ${buttonClassName}_default`;
              buttonClassNames += ' icon-expand_more';
              break;
            }
          }
        button(
          type=buttonType,
          name=buttonName,
          class=buttonClassNames,
          value=buttonValue
        )
  //- div
  //- -
  //-   let {
  //-     label, type, name, placeholder, button = {}, value, required, pattern, tabindex,
  //-     isStraight, isExpanded, notFocused, isFocused, isAutoFocused, forDrop, theme,
  //-     isDisabled, ariaLabel, isReadonly
  //-   } = props;
  //-   let 
  //-   className = 'text-field';
  //-   classNames = `${className} js-${className}`;
    //- let { isVisible: isVisibleButton } = button;
  //-   let themes = {
  //-     dropdown: 'dropdown',
  //-     dropdownFill: 'dropdown_fill',
  //-   }
  //-   let 
  //-     className = 'input';
  //-     classNames = `${className} js-${className}`;
  //-     classesInputSection = `${className}__section js-${className}__section`;
  //-     inputClasses = `${className}__input js-${className}__input`;
  //-   classesInputSection += isAutoFocused || isFocused ? ` ${className}__section_focused` : '';
  //-   classesInputSection += isVisibleButton ? ` ${className}__section_offset` : '';
  //-   classNames += themes[theme] ? ` ${className}_theme_${themes[theme]}` : '';
  //-   classNames += isStraight ? ` ${className}_straight` : '';
  //-   classNames += isExpanded ? ` ${className}_expanded` : '';
  //-   classNames += notFocused ? ` ${className}_not-focused` : '';
  //- div(class=classNames)
  //-   if label
  //-     div(class=`${className}__label`)
  //-       //- +title-label(label)
  //-   div(class=classesInputSection)
  //-     input(
  //-       id=name,
  //-       type=type,
  //-       name=name,
  //-       placeholder=placeholder,
  //-       pattern=pattern,
  //-       tabindex=tabindex,
  //-       required=required,
  //-       autofocus=isAutoFocus,
  //-       value=value,
  //-       class=inputClasses,
  //-       disabled=isDisabled,
  //-       aria-label=ariaLabel,
  //-       readonly=isReadonly
  //-     )
  //-     if (isVisibleButton)
  //-       -
  //-         let { type: buttonType, iconClass: buttonIconClassName, name: buttonName, value: buttonValue } = button;
  //-         let buttonClassName = `${className}__button`;
  //-         let buttonClassNames = `${buttonClassName} js-${buttonClassName}`;

  //-         switch (buttonIconClassName) {
  //-           case 'arrow-down': {
  //-             buttonClassNames += ` ${buttonClassName}_default`;
  //-             buttonClassNames += ' icon-expand_more';
  //-             break;
  //-           }
  //-           case 'arrow-forward': {
  //-             buttonClassNames += ` ${buttonClassName}_forwarded`;
  //-             buttonClassNames += ' icon-arrow_forward';
  //-             break;
  //-           }
  //-           default: {
  //-             buttonClassNames += buttonIconClassName ? ` ${buttonIconClassName}` : '';
  //-           }
  //-         }
  //-       button(type=buttonType, name=buttonName, class=buttonClassNames)
