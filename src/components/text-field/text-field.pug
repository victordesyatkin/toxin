include ../title-label/title-label
include ../icon/icon

mixin text-field(props)
  if props
    -
      let { title, type = 'text', name, placeholder, button, value, theme, ariaLabel,
        summary = '&nbsp;', pattern, tabindex, isDisabled, isReadOnly, isAutoFocused,
        isOpened, isRequired, isHidden, isSummaryOnly, isToggle, isDirect
      } = props;
      let themes = { comfort: 'comfort', guests: 'guests', date: 'date' };
      let className = 'text-field';
      let classNames = `${className} js-${className}`;
      let id = `${name}-${Math.random().toString(16).substr(2)}`;
      if (type === 'password' && isToggle) {
        button = { type: "button", iconClassName: "eye", ...button };
      }
      classNames += button ? ` ${className}_withButton` : ''; 
      classNames += themes[theme] ? ` ${className}_theme_${themes[theme]}` : '';
      classNames += isOpened ? ` ${className}_opened` : '';
      classNames += isHidden ? ` ${className}_hidden` : '';
      classNames += isDirect ? ` ${className}_direct` : '';
      type = isHidden ? 'hidden' : type;
    div(class=classNames)
      if title
        div(class=`${className}__label`)
          +title-label({ ...title, htmlFor: id })
      if button
        -
          let { type: buttonType = "button", iconClassName: buttonIconClassName,
            name: buttonName, value: buttonValue
          } = button;
          let buttonClassName = `${className}__button`;
          let buttonClassNames = `${buttonClassName} js-${buttonClassName}`;
          let buttonContentClassName = '';
          switch (buttonIconClassName) {
            case 'arrow-forward': {
              buttonClassNames += ` ${buttonClassName}_forwarded`;
              buttonContentClassName = 'icon-arrow_forward';
              break;
            }
            case 'arrow-down':
            default: {
              buttonClassNames += ` ${buttonClassName}_default`;
              buttonContentClassName = 'icon-expand_more';
              break;
            }
            case 'eye': {
              buttonClassNames += ` ${buttonClassName}_default_eye`;
              buttonContentClassName = 'icon-eye';
              break;
            }
          }
        button(
          type=buttonType,
          name=buttonName,
          class=buttonClassNames,
          value=buttonValue
        )
          +icon(buttonContentClassName)
      if isSummaryOnly
        p(class=`${className}__summary js-${className}__summary`) !{ summary }
      else if isHidden
        p(class=`${className}__summary js-${className}__summary`) !{ summary }
        input(
          type=type,
          name=name,
          placeholder=placeholder,
          value=value,
          autofocus=isAutoFocused,
          required=isRequired,
          pattern=pattern,
          tabindex=tabindex,
          aria-label=ariaLabel,
          disabled=isDisabled,
          readonly=isReadOnly,
          class=`${className}__input js-${className}__input`,
          id=id,
          hidden=isHidden
        )
      else
        input(
          type=type,
          name=name,
          placeholder=placeholder,
          value=value,
          autofocus=isAutoFocused,
          required=isRequired,
          pattern=pattern,
          tabindex=tabindex,
          aria-label=ariaLabel,
          disabled=isDisabled,
          readonly=isReadOnly,
          class=`${className}__input js-${className}__input`,
          id=id,
          hidden=isHidden
        )
